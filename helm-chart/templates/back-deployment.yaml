apiVersion: {{ template "taiga.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "taiga.fullname" . }}-back
  labels: {{- include "taiga.back.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels: {{- include "taiga.back.matchLabels" . | nindent 6 }}
  replicas: {{ .Values.back.replicas }}
  template:
    metadata:
      labels: {{- include "taiga.back.labels" . | nindent 8 }}
        app.kubernetes.io/component: {{ template "taiga.name" . }}-back
      {{- if .Values.back.podAnnotations }}
      annotations:
        {{- include "taiga.tplValue" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      {{- include "taiga.back.imagePullSecrets" . | indent 6 }}
      {{- if .Values.back.affinity }}
      affinity: {{- include "redmine.tplValue" (dict "value" .Values.back.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.back.nodeSelector }}
      nodeSelector: {{- include "taiga.tplValue" (dict "value" .Values.back.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.back.tolerations }}
      tolerations: {{- include "redmine.tplValue" (dict "value" .Values.back.tolerations "context" $) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "taiga.serviceAccountName" . }}
      {{- with .Values.back.securityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      # https://www.caktusgroup.com/blog/2017/03/14/production-ready-dockerfile-your-python-django-app/
      - name: {{ template "taiga.fullname" . }}-back
        image: {{ template "taiga.back.image" . }}
        imagePullPolicy: {{ .Values.back.image.pullPolicy | quote }}
        {{- if .Values.back.resources }}
        resources: {{ toYaml .Values.back.resources | nindent 12 }}
        {{- end }}
        env:
          - name: POSTGRES_DB
            value: "{{ .Values.postgresql.postgresqlDatabase }}"
          - name: POSTGRES_USER
            value: "{{ .Values.postgresql.postgresqlUsername }}"
          - name: POSTGRES_PASSWORD
            value: "{{ .Values.postgresql.postgresqlPassword }}"
          - name: POSTGRES_HOST
            value: "{{ template "taiga.fullname" . }}-postgresql"
          - name: TAIGA_SECRET_KEY
            value: "{{ .Values.secretKey }}"
          {{ if .Values.ingress.enabled }}
          - name: TAIGA_SITES_DOMAIN
            value: "{{ .Values.ingress.hostname }}"
          {{- if .Values.ingress.tls }}
          - name: TAIGA_SITES_SCHEME
            value: "https"
          {{- else }}
          - name: TAIGA_SITES_SCHEME
            value: "http"
          - name: SESSION_COOKIE_SECURE
            value: "False"
          - name: CSRF_COOKIE_SECURE
            value: "False"
          {{- end }}
          {{ else }}
          - name: TAIGA_SITES_DOMAIN
            value: "localhost:9000"
          - name: TAIGA_SITES_SCHEME
            value: "http"
          - name: SESSION_COOKIE_SECURE
            value: "False"
          - name: CSRF_COOKIE_SECURE
            value: "False"
          {{ end }}
          {{ if .Values.smtp.enabled }}
          - name: EMAIL_BACKEND:
            value: "django.core.mail.backends.smtp.EmailBackend"
          - name: DEFAULT_FROM_EMAIL
            value: "{{ .Values.smtp.from }}"
          - name: EMAIL_USE_TLS
            {{- if .Values.smtp.tls }}
            value: "True"
            {{- else }}
            value: "False"
            {{- end }}
          - name: EMAIL_USE_SSL
            {{- if .Values.smtp.ssl }}
            value: "True"
            {{- else }}
            value: "False"
            {{- end }}
          - name: EMAIL_HOST
            value: "{{ .Values.smtp.host }}"
          - name: EMAIL_PORT
            value: "{{ .Values.smtp.port }}"
          - name: EMAIL_HOST_USER
            value: "{{ .Values.smtp.user }}"
          - name: EMAIL_HOST_PASSWORD
            value: "{{ .Values.smtp.password }}"
          {{ end }}
          - name: RABBITMQ_USER
            value: {{ .Values.async.rabbitmq.auth.username }}
          - name: RABBITMQ_PASS
            value: {{ .Values.async.rabbitmq.auth.password }}
          - name: ENABLE_TELEMETRY
            {{- if .Values.enableTelemetry }}
            value: "True"
            {{- else }}
            value: "False"
            {{- end }}
          - name: PUBLIC_REGISTER_ENABLED
            {{- if .Values.publicRegisterEnabled }}
            value: "True"
            {{- else }}
            value: "False"
            {{- end }}
          {{ if .Values.githubAuth.enabled }}
          - name: ENABLE_GITHUB_AUTH
            value: "True"
          - name: GITHUB_API_CLIENT_ID
            value: "{{ .Values.githubAuth.apiClientId }}"
          - name: GITHUB_API_CLIENT_SECRET
            value: "{{ .Values.githubAuth.apiClientSecret }}"
          {{ else }}
          - name: ENABLE_GITHUB_AUTH
            value: "False"
          {{ end }}
          {{ if .Values.gitlabAuth.enabled }}
          - name: ENABLE_GITLAB_AUTH
            value: "True"
          - name: GITLAB_API_CLIENT_ID
            value: "{{ .Values.gitlabAuth.apiClientId }}"
          - name: GITLAB_API_CLIENT_SECRET
            value: "{{ .Values.gitlabAuth.apiClientSecret }}"
          - name: GITLAB_URL
            value: "{{ .Values.gitlabAuth.gitlabUrl }}"
          {{ else }}
          - name: ENABLE_GITLAB_AUTH
            value: "False"
          {{ end }}
          - name: ENABLE_SLACK
            {{ if .Values.enableSlack }}
            value: "True"
            {{ else }}
            value: "False"
            {{ end }}
          {{ if .Values.githubImporter.enabled }}
          - name: ENABLE_GITHUB_IMPORTER
            value: "True"
          - name: GITHUB_API_CLIENT_ID
            value: "{{ .Values.githubImporter.apiClientId }}"
          - name: GITHUB_API_CLIENT_SECRET
            value: "{{ .Values.githubImporter.apiClientSecret }}"
          {{ else }}
          - name: ENABLE_GITHUB_IMPORTER
            value: "False"
          {{ end }}
          {{ if .Values.jiraImporter.enabled }}
          - name: ENABLE_JIRA_IMPORTER
            value: "True"
          - name: JIRA_IMPORTER_CONSUMER_KEY
            value: "{{ .Values.jiraImporter.consumerKey }}"
          - name: JIRA_IMPORTER_CERT
            value: "{{ .Values.jiraImporter.cert }}"
          - name: JIRA_IMPORTER_PUB_CERT
            value: "{{ .Values.jiraImporter.pubCert }}"
          {{ else }}
          - name: ENABLE_JIRA_IMPORTER
            value: "False"
          {{ end }}
          {{ if .Values.trelloImporter }}
          - name: ENABLE_TRELLO_IMPORTER
            value: "True"
          - name: TRELLO_IMPORTER_API_KEY
            value: "{{ .Values.trelloImporter.apiKey }}"
          - name: TRELLO_IMPORTER_SECRET_KEY
            value: "{{ .Values.trelloImporter.secretKey }}"
          {{ else }}
          - name: ENABLE_JIRA_IMPORTER
            value: "False"
          {{ end }}
          {{- if .Values.back.extraVars }}
          {{- toYaml .Values.back.extraVars | nindent 12 }}
          {{- end }}
        ports:
          - name: taiga-back
            containerPort: 8000
        # Original check: wget -q -t 1 --spider http://localhost:8080/api/v1/
        # but it does not work so change localhost to 127.0.0.1
        {{- if .Values.back.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /admin/login/
            port: 8000
          initialDelaySeconds: {{ .Values.back.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.back.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.back.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.back.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.back.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.back.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /admin/login/
            port: 8000
          initialDelaySeconds: {{ .Values.back.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.back.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.back.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.back.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.back.readinessProbe.failureThreshold }}
        {{- end }}
        volumeMounts:
          - name: taiga-static
            mountPath: /taiga-back/static
          - name: taiga-media
            mountPath: /taiga-back/media
      volumes:
        - name: taiga-static
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "taiga.fullname" .) }}-static
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: taiga-media
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "taiga.fullname" .) }}-media
          {{- else }}
          emptyDir: {}
          {{- end }}
